declare_project()

add_library(${PROJECT_NAME} STATIC
    ogl/render_context.hpp
    ogl/render_context.cpp
    ogl/uniform_handle.hpp
    vk/handles/buffer.hpp
    vk/handles/buffer.cpp
    vk/handles/command.hpp
    vk/handles/command.cpp
    vk/handles/command_buffer.hpp
    vk/handles/command_buffer.cpp
    vk/handles/command_pool.hpp
    vk/handles/command_pool.cpp
    vk/handles/debug_utils_messenger.hpp
    vk/handles/debug_utils_messenger.cpp
    vk/handles/descriptor_set.hpp
    vk/handles/descriptor_set.cpp
    vk/handles/descriptor_set_layout.hpp
    vk/handles/descriptor_set_layout.cpp
    vk/handles/descriptor_pool.hpp
    vk/handles/descriptor_pool.cpp
    vk/handles/device.hpp
    vk/handles/device.cpp
    vk/handles/fence.hpp
    vk/handles/fence.cpp
    vk/handles/framebuffer.cpp
    vk/handles/framebuffer.hpp
    vk/handles/graphics_pipeline.hpp
    vk/handles/graphics_pipeline.cpp
    vk/handles/handle.hpp
    vk/handles/image.hpp
    vk/handles/image.cpp
    vk/handles/image_view.hpp
    vk/handles/image_view.cpp
    vk/handles/instance.hpp
    vk/handles/instance.cpp
    vk/handles/memory.hpp
    vk/handles/memory.cpp
    vk/handles/pipeline_layout.hpp
    vk/handles/pipeline_layout.cpp
    vk/handles/physical_device.hpp
    vk/handles/physical_device.cpp
    vk/handles/simemory_accessor.hpp
    vk/handles/queue.hpp
    vk/handles/queue.cpp
    vk/handles/render_pass.hpp
    vk/handles/render_pass.cpp
    vk/handles/sampler.hpp
    vk/handles/sampler.cpp
    vk/handles/semaphore.hpp
    vk/handles/semaphore.cpp
    vk/handles/shader_module.hpp
    vk/handles/shader_module.cpp
    vk/handles/surface.hpp
    vk/handles/surface.cpp
    vk/handles/swapchain.hpp
    vk/handles/swapchain.cpp
    vk/graphics_context.hpp
    vk/graphics_context.cpp
    vk/model.hpp
    vk/model.cpp
    vk/pipeline.hpp
    vk/pipeline.cpp
    vk/render_target.hpp
    vk/renderer.hpp
    vk/renderer.cpp
    vk/render_context.hpp
    vk/render_context.cpp
    vk/resource_manager.hpp
    vk/resource_manager.cpp
    vk/swapchain.hpp
    vk/swapchain.cpp
    vk/texture.hpp
    vk/texture.cpp
    vk/types.hpp
    vk/uniform_handle.hpp
    vk/uniform_handle.cpp
    vk/uniform_provider.hpp
    vk/uniform_provider.cpp
    vk/utils.hpp
    assert.hpp
    camera.hpp
    camera.cpp
    graphical_application.hpp
    graphical_application.cpp
    igraphics_context.hpp
    imodel.hpp
    ipipeline.hpp
    irenderable.hpp
    irenderer.hpp
    irender_target.hpp
    iresource.hpp
    iresource_manager.hpp
    iswapchain.hpp
    itexture.hpp
    iuniform_handle.hpp
    renderable.hpp
    renderable.cpp
    renderable_pack.hpp
    renderable_pack.cpp
    render_context.hpp
    types.hpp
    update_timer.hpp
    utils.hpp
    uniform.hpp
    uniform.cpp
    uniform_value.hpp
    vertex.hpp
    window.hpp
    window.cpp
)

target_include_directories(${PROJECT_NAME} PUBLIC .)
